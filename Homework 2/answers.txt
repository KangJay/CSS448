Ji Kang
CSS448
Professor Jimm Hogg
Homework #2


Question 1: 
Pick out each Lexeme 
and say its representation (name, keyword, number, operator, punctuation, string)

- Skip whitespace until we hit a non-whitespace char 

int<=if nuf 23 sayso xyz:let numptie :str0==42’hello’ret

* Format = Lexeme : Token Representation 
- int : keyword 
- <= : operator
- if : keyword 
- nuf : keyword 
- 23 : number 
- sayso : name 
- xyz : name 
- ':' : punctuation
- let : keyword 
- numptie : name 
- ':' : punctuation
- str0 : name 
- == : operator 
- 42 : number 
- \'hello\' : string 
- ret : keyword 


Question 2: 
Given two examples of strings generated by each of the following regular expressions:
•   dog | cat
    1. dog 
    2. cat 

•   (ab)+
    1. ab
    2. ababababab

•   [a-c]*
    1. aaaaaaaaaaaaaaaaaaaaa
    2. acbcbabcbabcbabcbabcbabcbabcbabcb

•   [0-9A-F]+
    1. 0A2B3C4D
    2. ABCDEF0123456789

•   goo?gle
    1. google
    2. gogle

3.Explain to a friend, in a few sentences, what the lex (or flex) program does
    "Lex" and/or "Flex" is a open source software that'll take in a textual 
    specification denoting which characters match the specific token representations and produce a lexer. 
    The lexer is written in C. Once you compile it, you can feed it source code, that conforms to the
    specifications outlined, and produce tokens from the program. Essentially, it'll accept a regex "blue print" for the
    language and produce a scanner/lexer corresponding to it. 
